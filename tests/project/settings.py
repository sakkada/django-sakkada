"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATA_DIR = os.path.join(BASE_DIR, 'datadir')
APPS_DIR = os.path.join(BASE_DIR, 'apps')

# Insert apps dir to sys.path
APPS_DIR in sys.path or sys.path.insert(0, APPS_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '00000000000000000000000000000000000000000000000000'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',

    # sakkada apps
    'sakkada.template.htmlattrs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.environ.get('DB_NAME', 'sakkada'),
        'USER': os.environ.get('DB_USER', None),
        'PASSWORD': os.environ.get('DB_PASSWORD', None),
        'HOST': os.environ.get('DB_HOST', None),
        'PORT': os.environ.get('DB_PORT', None),
        'TEST': {},
    }
}

if DATABASES['default']['ENGINE'] == 'django.db.backends.sqlite3':
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
elif DATABASES['default']['ENGINE'] == 'django.db.backends.postgresql':
    pass
elif DATABASES['default']['ENGINE'] == 'django.db.backends.mysql':
    DATABASES['default'].update(**{
        'CHARSET': 'utf8',
        'COLLATION': 'utf8_general_ci',
    })


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'files', 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'files', 'media')
STATIC_URL = '/static/'
MEDIA_URL = '/media/'


# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
        # project formatters (https://docs.python.org/3/library/logging.html)
        'app.console': {
            '()': 'sakkada.utils.log.ColorizedFormatter',
            'format': '{lvl.color}{lvl.title}{p.r}: {p.ywb}{message}{p.r} '
                      '({p.yw}{asctime}{p.r}{p.we},{p.r} '
                      '{p.cn}{name}{p.r}{p.we}:{p.r}{p.gn}{funcName}{p.r}'
                      '{p.we}:{p.r}{p.yw}{lineno}{p.r})',
            'datefmt': "%d.%m.%Y %H:%M:%S",
            'style': '{',
        },
        'app.console.sql': {
            '()': 'sakkada.utils.log.ColorizedFormatter',
            'format': '{p.cnb}SQL{p.r}: {p.we}{message}{p.r}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_false',],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false',],
            'class': 'django.utils.log.AdminEmailHandler',
        },
        # project handlers
        'app.console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true',],
            'class': 'logging.StreamHandler',
            'formatter': 'app.console',
        },
        'app.console.sql': {
            'level': 'DEBUG',
            'filters': ['require_debug_true',],
            'class': 'logging.StreamHandler',
            'formatter': 'app.console.sql',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['mail_admins', 'app.console',],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server',],
            'level': 'INFO',
            'propagate': False,
        },
        # additionaly configured django and python loggers
        'django.request': {
            'handlers': ['mail_admins', 'app.console',],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['mail_admins', 'app.console',],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['app.console.sql',],
            'level': 'DEBUG',
            'propagate': False,
        },
        'py.warnings': {
            'handlers': ['app.console',],
            'level': 'DEBUG',
        },
        # root logger
        '': {
            'handlers': ['app.console',],
            'level': 'INFO',
        },
        # project (installed apps) loggers
        'main': {
            'handlers': ['app.console',],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
