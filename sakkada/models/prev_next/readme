Previous and next element selectors for model instance.
Allow to use specified queryset or custom ordering, else use default ordering.
Mixin work by adding ordering by pk for uniqueness, if it not exist,
and specific filtering by ordered fields.

Note: Mixin works only if all order_by fields defined as string values (no any
      expressions) and are local fields (no __ inside ordering field name) and
      no contains randomizer ('?' value).
ToDo: Realize expressions processing, at least local fields and direct forward
      relations, etc.

Functionality added:
-------------------
 *  "_get_current_ordering" method,
    params: queryset instance
    return ordering for specified queryset
 *  "_get_next_or_prev_by_order" method,
    params: order_by=None, queryset=None, cache_name=None,
            is_next=True, force=False, as_queryset=False
    - custom "order_by" and "queryset" can be passed via params
    - "cache_name" changes internal cache_name param, require when used twice
        (or more) with different queryset or/and ordering,
    - caching will be disabled if as_queryset=True or force="nocache",
    - if force is True, update current "cache_name".
    return next object if "is_next" else prev object,
        if "as_queryset" - return tuple(queryset, filter, ordering)
 *  "get_next_by_order" method,
    alias to _get_next_or_prev_by_order(is_next=True, **kwargs)
 *  "get_prev_by_order" method,
    alias to _get_next_or_prev_by_order(is_next=False, **kwargs)

Installation:
------------
 *  Install "django-sakkada"
 *  Import "from sakkada.models.prev_next.PrevNextModel"
 *  Set "PrevNextModel" as a class/subclass of your model
 *  Call methods "get_next_by_order" and "get_prev_by_order"
    on model instance with required params

Example usage:
-------------

model code:
-------------------------------------------------------------------------------
from django.db import models
from sakkada.models.prev_next import PrevNextModel


class SomeModel(PrevNextModel, models.Model)
    sort = models.IntegerField(default=500)
    date = models.DateTimeField(blank=True, null=True)

view code:
-------------------------------------------------------------------------------
queryset = SomeModel.objects.filter(some_filter).order_by(*some_order_by)[0:1]
object = get_object_or_404(queryset)

# get next on default ordering and filtering
next = object.get_next_by_order()

# get prev on current ordering and filtering (current queryset)
prev = object.get_prev_by_order(queryset=queryset)

# get prev on custom ordering (cache_name must be set to avoid cache names
#   clashing, or force must be in (True, 'nocache') to disable cache at all)
prev = object.get_prev_by_order(order_by=some_other_order_by,
                                cache_name='some_name')

# get prev on custom queryset and return queryset
qs = SomeModel.objects.filter(some_other_filter).order_by(*some_other_order_by)
queryset = object.get_prev_by_order(queryset=qs, as_queryset=True)

# get prev on default ordering and filtering, update cache
prev = object.get_prev_by_order(force=True)

# get next on default ordering and filtering, no cache
next = object.get_next_by_order(force='nocache')

# get next on default ordering and filtering, alternative cache_name
next = object.get_next_by_order(cache_name='some_other_name')

template code:
-------------------------------------------------------------------------------
{% if object.get_prev_by_order %}
<a href="{{ object.get_prev_by_order.get_absolute_url }}">Previous article</a>
{% endif %}
{# note: second call is cached by default, also you can use "with" tag #}

sql queries help:
-------------------------------------------------------------------------------
ordering: "-weight id" (weight field is null=True)

connection.features.nulls_order_largest=False (mysql, sqlite)
=============================================================
weight=500, id=7
----------------
next:   (("weight" = 500 AND "id" > 7) OR
         ("weight" < 500) OR
         ("weight" IS NULL)) AND NOT ("id" = 7)

prev:   (("weight" = 500 AND "id" < 7) OR
         ("weight" > 500)) AND NOT ("id" = 7)

weight=None, id=7
-----------------
next:   (("weight" IS NULL AND "id" > 7)) AND NOT ("id" = 7)

prev:   (("weight" IS NULL AND "id" < 7) OR
         ("weight" IS NOT NULL)) AND NOT ("id" = 7))

connection.features.nulls_order_largest=True (postgresql, oracle)
=================================================================
weight=500, id=7
----------------
next:   (("weight" = 500 AND "id" > 7) OR
         ("weight" < 500)) AND NOT ("id" = 7)

prev:   (("weight" = 500 AND "id" < 7) OR
         ("weight" > 500) OR
         ("weight" IS NULL)) AND NOT ("id" = 7)

weight=None, id=7
-----------------
next:   (("weight" IS NULL AND "id" > 7) OR
         ("weight" IS NOT NULL)) AND NOT ("id" = 7)

prev:   (("weight" IS NULL AND "id" < 7)) AND NOT ("id" = 7))
