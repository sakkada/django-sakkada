Previous and next element selectors with real queryset or custom ordering support.
Work by adding pk ordering, if not exist, for uniqueness, and some filtering by ordered fields.

Dependencies:
 * Django 1.2.1 or later

Functionality added:
 * '_get_current_ordering' method
    params - queryset
    return current ordering from queryset

 * '_get_next_or_previous_by_order' method
    params - is_next=True, order_by=[], queryset=False, cachename=False, force=False, as_queryset=False
    custom 'order_by' and 'queryset' can be passed via params
    'cachename' changes internal cache param name, require when used twice (or more) with different queryset or/and ordering, 
    no caching if as_queryset or force is 'nocache', if force is True, replace current cachename in cache
    return next object if 'is_next' else prev object, if 'as_queryset' - return tuple(queryset, filter, ordering)

 * 'get_next_by_order'
    alias to _get_next_or_previous_by_order(is_next=True, **kwargs)

 * 'get_prev_by_order'
    alias to _get_next_or_previous_by_order(is_next=False, **kwargs)

Usage:
 * import PrevNextModel to your models module and use as mixin
 * call methods 'get_next_by_order' and 'get_prev_by_order' with params from model instance

Usage example:

    # model code
    # ----------
    class MyModel(PrevNextModel, models.Model)
        sort = models.IntegerField(default=500)
        date = models.DateTimeField(blank=True, null=True)

    # view code
    # ----------
    queryset = MyModel.objects.filter(some_filter).order_by(some_order)[0]
    object = get_object_or_404(queryset)

    # get next on default ordering and filtering
    next = object.get_next_by_order()

    # get prev on current ordering and filtering
    prev = object.get_prev_by_order(queryset=queryset)

    # get prev on custom ordering (cachename must be set, or force must be in (True, 'nocache'))
    prev = object.get_prev_by_order(order_by=some_other_order_by, cachename='someelse')

    # get prev on custom queryset and return queryset
    data = object.get_prev_by_order(queryset=MyModel.objects.filter(some_other_filter).order_by(*some_other_order_by), as_queryset=True)