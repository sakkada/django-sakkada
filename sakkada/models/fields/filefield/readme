AdvancedFileField based on django FileField.
AdvancedFileField partially based on http://django.org.ua/wiki/ImrpovedFileField


Contains:
    AdvancedFileField
    AdvancedImageField


Functionality added:
 * 'erasable'   - field optional argument - erase file from fs on delete model,
                  default to False (after djagno 1.2.5 django does not erase
                  files from file system while deleting file value)
 * 'clearable'  - field  optional argument - show delete checkbox in forms,
                  which allows to delete filefield value on form save
                  if field is not required (blank)

Both AdvancedFieldFile and AdvancedImageFieldFile have the following
additional properties:
 * 'extension'  - extension of file (value with dot, for example: '.ext')
 * 'basename'   - basename of file ('b.c' if file path is '/a/b.c')
 * 'basename_splitext' - tuple with filename without extension and extension
                  itself (('b', '.c',) tuple if file path is '/a/b.c')
AdvancedImageField additionaly has method:
 * 'image_tag'  - returns img html tag, receives max_width keyword argument
                  (default to 200) - max value in width property of img tag


Usage:
 * import AdvancedFileField to your models and use as usual FileField
 * optionally set 'erasable' to erase files from fs on delete
 * optionally set 'clearable' to allow users clear filefield value with checkbox


Simple example of usage:
-----------------------
models.py:
---------
from sakkada.models.fields.filefield import fields
from sakkada.system import validators

class MyModel(models.Model)
    attach = fields.AdvancedFileField(
        _('Attach'), blank=True, null=False, upload_to="upload/files/%Y/%m/",
        clearable=True, erasable=True,
        validators=[
            validators.ExtensionValidator(['.zip', '.tar.gz', '.gz',]),
            validators.MimetypeValidator(['application/x-gzip', 'application/zip',]),
            validators.FilesizeValidator(max=1024*1024*10),
        ]
    )

    image = fields.AdvancedImageField(
        _('Image'), blank=False, null=False, upload_to="upload/images/%Y/%m/",
        clearable=False, erasable=True,
        validators=[
            validators.MimetypeValidator(['image/jpeg', 'image/png',]),
            validators.FilesizeValidator(max=1024*1024*5),
        ]
    )

admin.py:
--------
class MyModelAdmin(admin.ModelAdmin):
    list_display = ('id', 'image_tag',)

    def image_tag(self, obj):
        return obj.image.image_tag(max_width=220) if obj.image else ''
    image_tag.short_description = _('image')
