MarkListAdmin mixin.

ModelAdmin for showing object attributes values as leds-like mark symbols,
with highlighting marks and lines (table.tr if special value defined) and
also showing summary information about object on hover/click on mark panels.

Usage:
-----
 *  Install "django-sakkada"
 *  Import "sakkada.admin.mark_list.MarkListAdmin"
 *  Set "MarkListAdmin" as class of admin model
 *  Define "marks_config" value (list of dicts) with required attributes.
    Available keys for "marks_config" are:
      "on"        - CSS color in active state (required),
      "off"       - CSS color in inactive state (required),
      "condition" - get_marks "marks" key or obj.attr name to check (required),
      "title"     - Title of mark element (required),
      "row_on"    - If defined and mark is active/inactive and get_marks
      "row_off"     "color" value is None, css background-color of table.tr
                    will be set from row_on/row_off value (optional),
      "weight_on" - If several marks colors are defined, they will be sorted by
      "weight_off"  weight_x value, weight_on if active and vice versa,
                    by default weights of on and off are 500 and 300 (optional)
 *  Add "sakkada.admin.mark_list" to your INSTALLED_APPS
    for accessing "admin/mark_list/*" static files
 *  Define "get_marks" method, if required, which should return dict with
    current line marks config (see below)

Example usage:
-------------
from django.contrib import admin
from sakkada.admin.mark_list import MarkListAdmin


class SomeMarkListAdmin(MarkListAdmin, admin.ModelAdmin):
    marks_config = (
        {'on': '#70bf2b', 'off': '#eeeeee', 'condition': 'active',
         'title': 'Node is active', 'row_on': '#efd', 'row_off': '#ccc',},
        {'on': '#ff1744', 'off': '#e0e0e0', 'condition': 'menu_only',
         'title': 'Node use in menu only', 'row_on': '#ffe', 'row_off': '#fef',
         'weight_on': 600, 'weight_off': 550,},
        {'on': '#4fc3f7', 'off': '#dddddd', 'condition': 'view',
         'title': 'Alternative view defined'},
        {'on': '#ffa800', 'off': '#d0d0d0', 'condition': 'template',
         'title': 'Alternative template defined',},
        {'on': '#0094ff', 'off': '#cccccc', 'condition': 'link',
         'title': 'Node link defined directly'},
    )

    def get_marks_data(self):
        return {
            'marks': {
                'view': self.view,
                'template': self.template,
                'link': self.link,
            },
            'label': {
                'active': str(obj.menu_only).lower(),
                'menu_only': str(obj.menu_only).lower(),
                'link': obj.link or u'—',
                'view': obj.view or u'—',
                'template': obj.template or u'—',
                'behaviour': obj.behaviour or u'—',
                'filter_date': 'set' if obj.filter_date else u'—',
                'filter': 'set' if obj.filter else u'—',
                'order_by': obj.order_by or u'—',
                'onpage': obj.onpage or 10,
            },
            'color': '#ff0000' if obj.some_extra_property else None,
        }
